import type { Config } from "tailwindcss";

const generateDimensions = (): Array<string> => {
  return [
    "min-w-[var(--minWidth)]",
    "md:min-w-[var(--mdMinWidth)]",
    "lg:min-w-[var(--dMinWidth)]",
    "max-w-[var(--maxWidth)]",
    "md:max-w-[var(--mdMaxWidth)]",
    "lg:max-w-[var(--dMaxWidth)]",
    "w-[var(--width)]",
    "md:w-[var(--mdWidth)]",
    "lg:w-[var(--dWidth)]",

    "min-h-[var(--minHeight)]",
    "md:min-h-[var(--mdMinHeight)]",
    "lg:min-h-[var(--dMinHeight)]",
    "max-h-[var(--maxHeight)]",
    "md:max-h-[var(--mdMaxHeight)]",
    "lg:max-h-[var(--dMaxHeight)]",
    "h-[var(--height)]",
    "md:h-[var(--mdHeight)]",
    "lg:h-[var(--dHeight)]",
  ];
};
const generateIndentations = (): Array<string> => {
  return [
    "pt-[var(--m-pt)]",
    "pr-[var(--m-pr)]",
    "pb-[var(--m-pb)]",
    "pl-[var(--m-pl)]",
    "md:pt-[var(--md-pt)]",
    "md:pr-[var(--md-pr)]",
    "md:pb-[var(--md-pb)]",
    "md:pl-[var(--md-pl)]",
    "lg:pt-[var(--d-pt)]",
    "lg:pr-[var(--d-pr)]",
    "lg:pb-[var(--d-pb)]",
    "lg:pl-[var(--d-pl)]",
    "mt-[var(--m-mt)]",
    "mr-[var(--m-mr)]",
    "mb-[var(--m-mb)]",
    "ml-[var(--m-ml)]",
    "md:mt-[var(--md-mt)]",
    "md:mr-[var(--md-mr)]",
    "md:mb-[var(--md-mb)]",
    "md:ml-[var(--md-ml)]",
    "lg:mt-[var(--d-mt)]",
    "lg:mr-[var(--d-mr)]",
    "lg:mb-[var(--d-mb)]",
    "lg:ml-[var(--d-ml)]",
  ];
};

const generatePosition = (): Array<string> => {
  return [
    "top-auto",
    "left-auto",
    "right-auto",
    "bottom-auto",
    "absolute",
    "fixed",
    "relative",
    "sticky",
    "static",
    "inherit",
    "top-[var(--mPositionTop)]",
    "left-[var(--mPositionLeft)]",
    "right-[var(--mPositionRight)]",
    "bottom-[var(--mPositionBottom)]",
    "z-[var(--mPositionZ)]",
    "md:top-[var(--mdPositionTop)]",
    "md:left-[var(--mdPositionLeft)]",
    "md:right-[var(--mdPositionRight)]",
    "md:bottom-[var(--mdPositionBottom)]",
    "md:z-[var(--mdPositionZ)]",
    "d:top-[var(--dPositionTop)]",
    "d:left-[var(--dPositionLeft)]",
    "d:right-[var(--dPositionRight)]",
    "d:bottom-[var(--dPositionBottom)]",
    "d:z-[var(--dPositionZ)]",
  ];
};

const generateFlex = (): Array<string> => {
  return [
    "gap-[var(--gap)]",
    "md:gap-[var(--md-gap)]",
    "lg:gap-[var(--d-gap)]",
    "justify-center",
    "md:justify-center",
    "lg:justify-center",
    "justify-end",
    "md:justify-end",
    "lg:justify-end",
    "justify-start",
    "md:justify-start",
    "lg:justify-start",
    "justify-around",
    "md:justify-around",
    "lg:justify-around",
    "justify-between",
    "md:justify-between",
    "lg:justify-between",
    "justify-evenly",
    "md:justify-evenly",
    "lg:justify-evenly",
    "justify-stretch",
    "md:justify-stretch",
    "lg:justify-stretch",
    "justify-baseline",
    "md:justify-baseline",
    "lg:justify-baseline",
    "justify-normal",
    "md:justify-normal",
    "lg:justify-normal",
    "flex-wrap",
    "md:flex-wrap",
    "lg:flex-wrap",
    "flex-nowrap",
    "md:flex-nowrap",
    "lg:flex-nowrap",
    "flex-wrap-reverse",
    "md:flex-wrap-reverse",
    "lg:flex-wrap-reverse",
    "flex-col",
    "md:flex-col",
    "lg:flex-col",
    "flex-col-reverse",
    "md:flex-col-reverse",
    "lg:flex-col-reverse",
    "flex-row",
    "md:flex-row",
    "lg:flex-row",
    "flex-row-reverse",
    "md:flex-row-reverse",
    "lg:flex-row-reverse",
    "items-center",
    "md:items-center",
    "lg:items-center",
    "items-end",
    "md:items-end",
    "lg:items-end",
    "items-start",
    "md:items-start",
    "lg:items-start",
    "items-stretch",
    "md:items-stretch",
    "lg:items-stretch",
    "items-baseline",
    "md:items-baseline",
    "lg:items-baseline",
  ];
};

export const generateDisplay = (): Array<string> => {
  return [
    "block",
    "hidden",
    "inline",
    "inline-block",
    "flex",
    "table",
    "table-cell",
    "inline-flex",
    "grid",

    "md:block",
    "md:hidden",
    "md:inline",
    "md:inline-block",
    "md:flex",
    "md:table",
    "md:table-cell",
    "md:inline-flex",
    "md:grid",

    "lg:block",
    "lg:hidden",
    "lg:inline",
    "lg:inline-block",
    "lg:flex",
    "lg:table",
    "lg:table-cell",
    "lg:inline-flex",
    "lg:grid",
  ];
};

export const generateBackground = (): Array<string> => {
  // List of all CSS variable keys from your object

  return [
    "group",
    "lg:group-hover:bg-[color:var(--d-bg-group)]",
    "md:group-hover:bg-[color:var(--md-bg-group)]",
    "group-hover:bg-[color:var(--bg-group)]",
    "lg:group-hover:bg-[image:var(--d-bg-group)]",
    "md:group-hover:bg-[image:var(--md-bg-group)]",
    "group-hover:bg-[color:var(--bg-group)]",

    "bg-[image:var(--bg)]",
    "md:bg-[image:var(--md-bg)]",
    "lg:bg-[image:var(--d-bg)]",
    "bg-[color:var(--bg)]",
    "md:bg-[color:var(--md-bg)]",
    "lg:bg-[color:var(--d-bg)]",

    "hover:bg-[image:var(--h-bg)]",
    "hover:md:bg-[image:var(--md-h-bg)]",
    "hover:lg:bg-[image:var(--d-h-bg)]",
    "hover:bg-[color:var(--h-bg)]",
    "hover:md:bg-[color:var(--md-h-bg)]",
    "hover:lg:bg-[color:var(--d-h-bg)]",

    "bg-none",
    "md:bg-none",
    "lg:bg-none",

    "bg-repeat",
    "md:bg-repeat",
    "lg:bg-repeat",
    "bg-no-repeat",
    "md:bg-no-repeat",
    "lg:bg-no-repeat",
    "bg-repeat-x",
    "md:bg-repeat-x",
    "lg:bg-repeat-x",
    "bg-repeat-y",
    "md:bg-repeat-y",
    "lg:bg-repeat-y",
    "bg-repeat-round",
    "md:bg-repeat-round",
    "lg:bg-repeat-round",
    "bg-repeat-space",
    "md:bg-repeat-space",
    "lg:bg-repeat-space",

    "hover:bg-repeat",
    "hover:md:bg-repeat",
    "hover:lg:bg-repeat",
    "hover:bg-no-repeat",
    "hover:md:bg-no-repeat",
    "hover:lg:bg-no-repeat",
    "hover:bg-repeat-x",
    "hover:md:bg-repeat-x",
    "hover:lg:bg-repeat-x",
    "hover:bg-repeat-y",
    "hover:md:bg-repeat-y",
    "hover:lg:bg-repeat-y",
    "hover:bg-repeat-round",
    "hover:md:bg-repeat-round",
    "hover:lg:bg-repeat-round",
    "hover:bg-repeat-space",
    "hover:md:bg-repeat-space",
    "hover:lg:bg-repeat-space",

    "bg-cover",
    "md:bg-cover",
    "lg:bg-cover",
    "bg-contain",
    "md:bg-contain",
    "lg:bg-contain",
    "bg-auto",
    "md:bg-auto",
    "lg:bg-auto",

    "hover:bg-cover",
    "hover:md:bg-cover",
    "hover:lg:bg-cover",
    "hover:bg-contain",
    "hover:md:bg-contain",
    "hover:lg:bg-contain",
    "hover:bg-auto",
    "hover:md:bg-auto",
    "hover:lg:bg-auto",

    "bg-bottom",
    "md:bg-bottom",
    "lg:bg-bottom",
    "bg-center",
    "md:bg-center",
    "lg:bg-center",
    "bg-left",
    "md:bg-left",
    "lg:bg-left",
    "bg-left-bottom",
    "md:bg-left-bottom",
    "lg:bg-left-bottom",
    "bg-left-top",
    "md:bg-left-top",
    "lg:bg-left-top",
    "bg-right",
    "md:bg-right",
    "lg:bg-right",
    "bg-right-bottom",
    "md:bg-right-bottom",
    "lg:bg-right-bottom",
    "bg-right-top",
    "md:bg-right-top",
    "lg:bg-right-top",
    "bg-top",
    "md:bg-top",
    "lg:bg-top",

    "hover:bg-bottom",
    "hover:md:bg-bottom",
    "hover:lg:bg-bottom",
    "hover:bg-center",
    "hover:md:bg-center",
    "hover:lg:bg-center",
    "hover:bg-left",
    "hover:md:bg-left",
    "hover:lg:bg-left",
    "hover:bg-left-bottom",
    "hover:md:bg-left-bottom",
    "hover:lg:bg-left-bottom",
    "hover:bg-left-top",
    "hover:md:bg-left-top",
    "hover:lg:bg-left-top",
    "hover:bg-right",
    "hover:md:bg-right",
    "hover:lg:bg-right",
    "hover:bg-right-bottom",
    "hover:md:bg-right-bottom",
    "hover:lg:bg-right-bottom",
    "hover:bg-right-top",
    "hover:md:bg-right-top",
    "hover:lg:bg-right-top",
    "hover:bg-top",
    "hover:md:bg-top",
    "hover:lg:bg-top",
  ];
};

const generateTypography = (): Array<string> => {
  return [
    "text-[color:var(--color)]",
    "md:text-[color:var(--md-color)]",
    "hover:text-[color:var(--d-color)]",
    "hover:text-[color:var(--hover-color)]",
    "hover:md:text-[color:var(--hover-md-color)]",
    "hover:lg:text-[color:var(--hover-d-color)]",
    "[font-size:var(--fs)]",
    "md:[font-size:var(--md-fs)]",
    "[font-size:var(--d-fs)]",
    "hover:[font-size:var(--hover-fs)]",
    "md:hover:[font-size:var(--hover-md-fs)]",
    "lg:hover:[font-size:var(--hover-d-fs)]",
    "[font-weight:var(--fw)]",
    "md:[font-weight:var(--md-fw)]",
    "[font-weight:var(--d-fw)]",
    "hover:[font-weight:var(--hover-fw)]",
    "md:hover:[font-weight:var(--hover-md-fw)]",
    "lg:hover:[font-weight:var(--hover-d-fw)]",
    "[line-height:var(--lh)]",
    "md:[line-height:var(--md-lh)]",
    "[line-height:var(--d-lh)]",
    "hover:[line-height:var(--hover-lh)]",
    "md:hover:[line-height:var(--hover-md-lh)]",
    "lg:hover:[line-height:var(--hover-d-lh)]",
    "align-top",
    "align-middle",
    "align-bottom",
    "md:align-top",
    "md:align-middle",
    "md:align-bottom",
    "lg:align-top",
    "lg:align-middle",
    "lg:align-bottom",
    "hover:align-top",
    "hover:align-middle",
    "hover:align-bottom",
    "md:hover:align-top",
    "md:hover:align-middle",
    "md:hover:align-bottom",
    "lg:hover:align-top",
    "lg:hover:align-middle",
    "lg:hover:align-bottom",
    "text-left",
    "text-center",
    "text-right",
    "md:text-left",
    "md:text-center",
    "md:text-right",
    "lg:text-left",
    "lg:text-center",
    "lg:text-right",
    "hover:text-left",
    "hover:text-center",
    "hover:text-right",
    "md:hover:text-left",
    "md:hover:text-center",
    "md:hover:text-right",
    "lg:hover:text-left",
    "lg:hover:text-center",
    "lg:hover:text-right",
    "uppercase",
    "lowercase",
    "capitalize",
    "normal-case",
    "md:uppercase",
    "md:lowercase",
    "md:capitalize",
    "md:normal-case",
    "lg:uppercase",
    "lg:lowercase",
    "lg:capitalize",
    "lg:normal-case",
    "hover:uppercase",
    "hover:lowercase",
    "hover:capitalize",
    "hover:normal-case",
    "md:hover:uppercase",
    "md:hover:lowercase",
    "md:hover:capitalize",
    "md:hover:normal-case",
    "lg:hover:uppercase",
    "lg:hover:lowercase",
    "lg:hover:capitalize",
    "lg:hover:normal-case",
    "underline",
    "no-underline",
    "md:no-underline",
    "lg:no-underline",
    "line-through",
    "overline",
    "md:underline",
    "md:line-through",
    "md:overline",
    "lg:underline",
    "lg:line-through",
    "lg:overline",
    "hover:underline",
    "hover:line-through",
    "hover:overline",
    "md:hover:underline",
    "md:hover:line-through",
    "md:hover:overline",
    "lg:hover:underline",
    "lg:hover:line-through",
    "lg:hover:overline",
    "text-ellipsis",
    "text-clip",
    "md:text-ellipsis",
    "md:text-clip",
    "lg:text-ellipsis",
    "lg:text-clip",
    "hover:text-ellipsis",
    "hover:text-clip",
    "md:hover:text-ellipsis",
    "md:hover:text-clip",
    "lg:hover:text-ellipsis",
    "lg:hover:text-clip",
    "whitespace-nowrap",
    "whitespace-pre",
    "whitespace-pre-line",
    "whitespace-pre-wrap",
    "md:whitespace-nowrap",
    "md:whitespace-pre",
    "md:whitespace-pre-line",
    "md:whitespace-pre-wrap",
    "lg:whitespace-nowrap",
    "lg:whitespace-pre",
    "lg:whitespace-pre-line",
    "lg:whitespace-pre-wrap",
    "hover:whitespace-nowrap",
    "hover:whitespace-pre",
    "hover:whitespace-pre-line",
    "hover:whitespace-pre-wrap",
    "md:hover:whitespace-nowrap",
    "md:hover:whitespace-pre",
    "md:hover:whitespace-pre-line",
    "md:hover:whitespace-pre-wrap",
    "lg:hover:whitespace-nowrap",
    "lg:hover:whitespace-pre",
    "lg:hover:whitespace-pre-line",
    "lg:hover:whitespace-pre-wrap",
    "break-all",
    "keep-all",
    "break-word",
    "md:break-all",
    "md:keep-all",
    "md:break-word",
    "lg:break-all",
    "lg:keep-all",
    "lg:break-word",
    "hover:break-all",
    "hover:keep-all",
    "hover:break-word",
    "md:hover:break-all",
    "md:hover:keep-all",
    "md:hover:break-word",
    "lg:hover:break-all",
    "lg:hover:keep-all",
    "lg:hover:break-word",
  ];
};

const generateGap = (): Array<string> => {
  return ["gap-[var(--gap)]", "md:gap-[var(--mdGap)]", "lg:gap-[var(--dGap)]"];
};

const generateEffectClasses = (): Array<string> => {
  return [
    // Box shadow
    "[box-shadow:var(--box-sh)]",
    "md:[box-shadow:var(--md-box-sh)]",
    "lg:[box-shadow:var(--d-box-sh)]",
    "hover:[box-shadow:var(--box-hoversh)]",
    "md:hover:[box-shadow:var(--md-box-hoversh)]",
    "lg:hover:[box-shadow:var(--d-box-hoversh)]",

    // Text shadow
    "[text-shadow:var(--text-sh)]",
    "md:[text-shadow:var(--md-text-sh)]",
    "lg:[text-shadow:var(--d-text-sh)]",
    "hover:[text-shadow:var(--text-hoversh)]",
    "md:hover:[text-shadow:var(--md-text-hoversh)]",
    "lg:hover:[text-shadow:var(--d-text-hoversh)]",

    // Opacity
    "[opacity:var(--opty-d)]",
    "md:[opacity:var(--md-opty-d)]",
    "lg:[opacity:var(--d-opty-d)]",
    "hover:[opacity:var(--opty-hoverd)]",
    "md:hover:[opacity:var(--md-opty-hoverd)]",
    "lg:hover:[opacity:var(--d-opty-hoverd)]",

    // Overflow
    "[overflow:var(--oflow-ed)]",
    "md:[overflow:var(--md-oflow-ed)]",
    "lg:[overflow:var(--d-oflow-ed)]",
    "hover:[overflow:var(--oflow-hovered)]",
    "md:hover:[overflow:var(--md-oflow-hovered)]",
    "lg:hover:[overflow:var(--d-oflow-hovered)]",

    // Backdrop blur
    "[backdrop-filter:blur(var(--bb-l))]",
    "md:[backdrop-filter:blur(var(--md-bb-l))]",
    "lg:[backdrop-filter:blur(var(--d-bb-l))]",
    "hover:[backdrop-filter:blur(var(--bb-hoverl))]",
    "md:hover:[backdrop-filter:blur(var(--md-bb-hoverl))]",
    "lg:hover:[backdrop-filter:blur(var(--d-bb-hoverl))]",
  ];
};

export default {
  content: ["./src/**/{**,.client,.server}/**/*.{js,jsx,ts,tsx}"],
  safelist: [
    ...generateIndentations(),
    ...generatePosition(),
    ...generateFlex(),
    ...generateDisplay(),
    ...generateDimensions(),
    ...generateGap(),
    ...generateBackground(),
    ...generateTypography(),
    ...generateEffectClasses(),
  ],
  theme: {
    extend: {
      global: {
        breakWord: "var(--word-break)",
        breakLine: "var(--line-break)",
      },
      fontFamily: {
        sans: [
          "Noto Sans SC",
          "Inter",
          "ui-sans-serif",
          "system-ui",
          "sans-serif",
          "Apple Color Emoji",
          "Segoe UI Emoji",
          "Segoe UI Symbol",
          "Noto Color Emoji",
        ],
      },
      colors: {
        "gray-main": "#C7C7CB",
        "custom-purple": "#C8A0F0",
        "light-heading": "rgba(255, 255, 255, 0.5)",
      },
      backgroundColor: {
        "custom-purple": "rgba(165, 69, 189, 0.4)",
        "dark-overlay": "rgba(0, 0, 0, 0.7)",
      },
      backgroundImage: {
        "hover-value": "var(--hoverBgValue)",
        "hover-mdValue": "var(--hoverMdBgValue)",
        "hover-dValue": "var(--hoverDBgValue)",
        "golden-gradient":
          "linear-gradient(211.41deg, var(--colors-text-accent-hovered) 17.73%, var(--colors-text-accent-default) 81.23%)",

        "button-primary-gradient":
          "linear-gradient(90deg, #8032FF 0%, #FF3D00 100%)",
        sunrise: "linear-gradient(0deg, #FCB242 12.5%, #FFE793 80.51%)",
      },
    },
  },
  plugins: [],
} satisfies Config;
